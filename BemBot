import os
import telebot
import requests
import json
import logging
import random
from random_word import RandomWords
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CallbackQueryHandler, CommandHandler, ContextTypes
import time
import datetime
import threading
import asyncio
#import aiohttp
#import aiogram
#________________________________inline keyboard
from aiogram.types import ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from aiogram import types, Dispatcher, Bot
#_______________________________________________

my_secret = os.environ['BOT_TOKEN']
bot = telebot.TeleBot(my_secret, parse_mode=None)

print('bot started....')

def main():
  # Enable logging
  logging.basicConfig(
      format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
      level=logging.INFO)
  
  logger = logging.getLogger(__name__)
  # logging
  
  logger = logging.getLogger(__name__)
  
  currentDateTime = datetime.datetime.now()

#___________________ ASYNC AWAIT____________________
  async def my_coroutine():
    for i in range(20):
      await asyncio.sleep(5)
      result = datetime.datetime.now()
      print(datetime.datetime.now())
    return result 


  # call my_async_function
  loop = asyncio.new_event_loop()
  asyncio.set_event_loop(loop)
  my_loop = asyncio.get_event_loop()
  my_loop.run_until_complete(my_coroutine())
  #result = asyncio.run(my_coroutine())
  #print(result)
  
  '''for x in range(0, 1440):
      t = datetime.datetime.now()
      print(t)
      time.sleep(31)
      del t'''
#________________ASYNC AWAIT____________________


  @bot.message_handler(commands=['start', 'hello'])
  def send_welcome(message):
    bot.reply_to(message, "shatap you stupid dweeb")
  

  
  '''@bot.message_handler(commands=['time'])
  def send_time(message):
    timeDateStr = 'Day: ' + str(timeDateDict['Day']) + " " + 'Time: ' + str(timeDateDict['Hour']) + ':' + str(timeDateDict['Minute']) + ' : ' + str(timeDateDict['Seconds']) 
    bot.reply_to(message, timeDateStr)'''
    
  
  
  @bot.message_handler(commands=['nogsniffer'])
  def nogsniffer(message):
    # waits for answer
    randomNum = 0
    randomNum = round(random.uniform(0, 3))
    time.sleep(32.2)
      
    if randomNum <= 1:
      newStr = "This chat is full of mountain nogs at the moment"      
    elif randomNum == 2:
      newStr = "Vern has been detected"           
    else:
      newStr = "various genre of nogs are currently flooding the chat"
  
    #print(randomInherit.run())
    bot.reply_to(message, newStr)
  
  
  @bot.message_handler(commands=["poor"])
  def poor(message):
    bot.reply_to(message, "spent all my life savings to visit Manhattan")
  
  
  @bot.message_handler(commands=["business"])
  def business(message):
    bot.reply_to(message, "this is the business we have chosen")
  
  
  @bot.message_handler(commands=["bridge"])
  def bridge(message):
    bot.reply_to(message, "a handy I shall give me customer full satisfaction")
  
  
  @bot.message_handler(commands=["fifteendollars"])
  def fifteendollars(message):
    bot.reply_to(message,
                 "Alex is a cheap xore and doesn't clean up after himself")
  
  
  @bot.message_handler(commands=["me"])
  def text_filter2(message):
    bot.send_message(
        message.chat.id,
        "{name} is your friend".format(name=message.from_user.first_name))
  
  
  @bot.message_handler(commands=["grapefruit"])
  def photo(message):
    bot.send_message(
        message.chat.id,
        "https://ak1.ostkcdn.com/images/products/is/images/direct/7511aed92f9de24847683a0e76891e54c19f1ce3/Designart-%27Grapefruit-Infinity-Spiral%27-Modern-Duvet-Cover-Set.jpg"
    )
  
  
  @bot.message_handler(commands=["hitler", "88", "adolfoftheday"])
  def photo(message):
    bot.send_message(
        message.chat.id,
        "https://www.hitler-archive.com/design/featured/th-block-44-goring.jpg"
    )
  
  
  @bot.message_handler(commands=["chance"])
  def chance(message):
    percent = str(round(random.uniform(0, 1) * 100))
    bot.send_message(message.chat.id,
                     "There is a " + percent + "%" + " " + message.text)
  
  
  @bot.message_handler(commands=["troll"])
  def troll(message):
    response_API = requests.get('https://insult.mattbas.org/api/insult')
    print(response_API.status_code)
    data = response_API.text
    #print(data)
    #parse_json = json.loads(data)
    bot.reply_to(message, data)
  
  
  @bot.message_handler(commands=["paolotron"])
  def paolotron(message):
    response_API = requests.get(
        'https://evilinsult.com/generate_insult.php?lang=en&type=json')
    print(response_API.status_code)
    array = json.loads(response_API.text)
    #print(array)
    #print(array['insult'])
    #data = response_API.text
    #print(data)
    #parse_json = json.loads(data)
    word = message.text
    scramble = list(word)
    #print(scramble)
    random.shuffle(scramble)
    newphrase = ''.join(scramble)
    #print(newphrase)
    r = RandomWords()
    word_rand = r.get_random_word()
    word_rand2 = r.get_random_word()
  
    bot.reply_to(
        message, newphrase[:5] + "  " + word_rand + "  " + newphrase[5:10] +
        "  " + array['insult'] + " " + word_rand2 + " " + ": my friend ")
  
  
  @bot.message_handler(commands=["dart"])
  def dice(message):
    bot.send_dice(message.chat.id, "ðŸŽ¯")
  
  
  @bot.message_handler(commands=["dice"])
  def dice(message):
    bot.send_dice(message.chat.id)
  
  @bot.message_handler(commands=["ball"])
  def dice(message):
    bot.send_dice(message.chat.id, 'âš½')
  
  @bot.message_handler(commands=["poll"])
  def poll(message):
    bot.send_poll(message.chat.id, "Who is the Fed here?", ["Russ", "Fedberg", "Ransom", "Alex"], 30)
  
  @bot.message_handler(commands=["nyx"])
  def nyx(message):
    bot.reply_to(message,
                 "Bruh, that shitlorf got rekt")
 



class Time:
  def __init__(self, hour, minute):
    self.hour = hour
    self.minute = minute

def goodNight():
  for x in range(0, 1440):
    time.sleep(31)
    updateTimeObj = datetime.datetime.now()
    night = Time(updateTimeObj.hour, updateTimeObj.minute)
    if (night.hour == 3 and night.minute == 3):
      bot.send_message(-1001369983015, "Good Night Peeps!")
    time.sleep(31)
    del night
    if x==1440:
      del x

def morning():
  for x in range(0, 1440):
    time.sleep(31)
    updateTimeObj = datetime.datetime.now()
    morning = Time(updateTimeObj.hour, updateTimeObj.minute)
    if (morning.hour == 13 and morning.minute == 0):
      bot.send_message(-1001369983015, "Good Morning Phaegs!")
    time.sleep(31)
    del morning
    if x==1440:
      del x

def test():
  for x in range(0, 1440):
    time.sleep(5)
    updateTimeObj = datetime.datetime.now()
    test = Time(updateTimeObj.hour, updateTimeObj.minute)
    if (test.minute == 56):
      bot.send_message(-681387171, 'test')
    #print(test.minute)
    time.sleep(31)
    del test
    if x==1440:
      del x

def afternoon():
  for x in range(0, 1440):
    #time.sleep(29)
    updateTimeObj = datetime.datetime.now()
    afternoon = Time(updateTimeObj.hour, updateTimeObj.minute)
    if (afternoon.hour == 18 and afternoon.minute == 25):
      bot.send_message(-1001369983015, "test")
    time.sleep(29)
    del afternoon
    if x==1440:
      del x

# creating thread
t1 = threading.Thread(target=main)
t2 = threading.Thread(target=goodNight)
t3 = threading.Thread(target=morning)
t4 = threading.Thread(target=test)
t5 = threading.Thread(target=afternoon)

# starting thread 1
t1.start()
# starting thread 2
t2.start()
# starting thread 3
t3.start()
# starting thread 4
t4.start()
# starting thread 5
t5.start()

# wait until thread 1 is completely executed
#t1.join()
# wait until thread 2 is completely executed
#t2.join()
# wait until thread 3 is completely executed
#t3.join()


asyncio.run(bot.polling())
#bot.infinity_polling()
